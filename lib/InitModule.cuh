#pragma once
#include"DataStructure.cuh"
#include"GeometricModule.cuh"

__global__ void initG_m_n(int m,int n)
{
    int i=threadIdx.x;
    int j=blockIdx.x;
    G_m_n[i][j]=1.0*C[m][i]*C[n][j]/C[m+n][i+j]/(m+n+1);
}
__global__ void initG_m_m(int m)
{
    int i=threadIdx.x;
    int j=blockIdx.x;
    G_m_m[i][j]=1.0*C[m][i]*C[m][j]/C[2*m][i+j]/(2*m+1);
}

__global__ void printtestG(int m,int n)
{
    for(int i=0;i<=m;i++)
    {
        for(int j=0;j<=n;j++)
        {
            printf("G %d %d :",i,j);
            printf("%d \\",C[m][i]*C[n][j]);
            printf(" %d\n",C[m+n][i+j]*(m+n+1));
        }
    }
}
__global__ void printG(int m,int n)
{
    int i=threadIdx.x;
    int j=blockIdx.x;
    printf("G_m_n[%d][%d]=%f\n",i,j,G_m_n[i][j]);
    if(i<4&&j<4)
        printf("G_m_m[%d][%d]=%f\n",i,j,G_m_m[i][j]);

}
__global__ void initC(int n)
{
    int id=blockDim.x*blockIdx.x+threadIdx.x;
    // printf("id=%d\n",id);
    if(id<n)
    {
        for(int i=0;i<=n;i++)
        {
            if(id==0)
                C[i][id]=1;
            else if(id<=i)
                C[i][id]=(C[i-1][id]+C[i-1][id-1]);
            // printf("C[%d][%d]=%d\n",id,i,C[id][i]);
            __syncthreads();
        }
    }
}

__global__ void printC()
{
    int id=blockDim.x*blockIdx.x+threadIdx.x;
    if(id<2*SIZE)
    {
        for(int i=0;i<=id;i++)
        {
            printf("C[%d][%d]=%d\n",id,i,C[id][i]);
        }
    }
}

void init_testpoint(Point *P,int n)
{
    P[0].x=2.5;
    P[0].y=3.0;
    P[0].z=1.0;
    P[0].w=1.0;
    for(int i=1;i<n;i++)
    {
        P[i].x=1.0;
        P[i].y=1.4;
        P[i].z=1.0;
        P[i].w=1.0;
    }
}

void init_randompoint(Point *P, int n) {
    // 设置随机数种子
    srand((unsigned int)time(NULL));

    for (int i = 0; i < n; i++) {
        P[i].x = (double)rand() / RAND_MAX * 4.0; // 生成0到4的随机数
        P[i].y = (double)rand() / RAND_MAX * 4.0; // 生成0到4的随机数
        P[i].z = 1.0;
        P[i].w = 1.0;
    }
}

void init_randompoint_for_inversion(Point *P, int n) {
    // 设置随机数种子
    srand((unsigned int)time(NULL));
    for(int i=0;i<n;i++)
        ground_truth[i]=(double)rand() / RAND_MAX * 1.0;

    for (int i = 0; i < n; i++) {
        P[i]=evaluate_Bspline(knots,control_points,p,control_points.size(),ground_truth[i]);
    }
    P[0]=control_points[0];
    P[1]=control_points[control_points.size()-1];
    ground_truth[0]=knots[p];
    ground_truth[1]=knots[control_points.size()];
}

void init_randompoint_0to1_2D(Point *P, int n) {
    // 设置随机数种子
    srand((unsigned int)time(NULL));

    for (int i = 0; i < n; i++) {
        P[i].x = (double)rand() / RAND_MAX * 1.0; // 生成0到4的随机数
        P[i].y = (double)rand() / RAND_MAX * 1.0; // 生成0到4的随机数
        P[i].z = 0.0;
        P[i].w = 1.0;
    }
}
void init_randompoint_0to1(Point *P, int n) {
    // 设置随机数种子
    srand((unsigned int)time(NULL));

    for (int i = 0; i < n; i++) {
        P[i].x = (double)rand() / RAND_MAX * 1.0; 
        P[i].y = (double)rand() / RAND_MAX * 1.0; 
        P[i].z = (double)rand() / RAND_MAX * 1.0;
        P[i].w = 1.0;
    }
    P[0].x=0.0;
    P[0].y=0.0;
    P[0].z=0.0;
    P[1].x=1.0;
    P[1].y=1.0;
    P[1].z=1.0;
}

void init_degree4_2D_easy()
{
//     knots = [0, 0, 0, 0, 0,   # 前导节点 (p+1)
//          1, 1, 1, 1, 1]  # 尾部节点 (p+1)

// control_points = [
//     [0.0, 0.5, 0.0, 1.0],
//     [0.1, 0.7, 0.0, 1.0],
//     [0.3, 0.8, 0.0, 1.0],
//     [0.8, 0.6, 0.0, 1.0],
//     [1.0, 0.1, 0.0, 1.0]
// ]
    knots = {0, 0, 0, 0, 0,   // 前导节点 (p+1)
             1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z=0
    Point p0{0.0, 0.5, 0.0, 1.0};
    Point p1{0.1, 0.7, 0.0, 1.0};
    Point p2{0.3, 0.8, 0.0, 1.0};
    Point p3{0.8, 0.6, 0.0, 1.0};
    Point p4{1.0, 0.1, 0.0, 1.0};

    control_points = {p0, p1, p2, p3, p4};
}
void init_degree4_2D_normal()
{
//     knots = [0, 0, 0, 0,0,   # 前导节点 (p+1)
//          0.1, 0.2, 0.4, 0.5,   # 内部节点
//          1, 1, 1, 1,1]  # 尾部节点 (p+1)

// control_points = [
//     [0.0, 0.0, 0.0, 1.0],
//     [0.0, 0.5, 0.0, 1.0],
//     [0.25, 0.5, 0.0, 1.0],
//     [0.25, 1.0, 0.0, 1.0],
//     [0.5, 1.0, 0.0, 1.0],
//     [0.5, 0.5, 0.0, 1.0],
//     [0.75, 0.5, 0.0, 1.0],
//     [0.75, 0.0, 0.0, 1.0],
//     [1.0, 0.0, 0.0, 1.0]
// ]
    knots = {0, 0, 0, 0, 0,   // 前导节点 (p+1)
             0.1, 0.2, 0.4, 0.5,   // 内部节点
             1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    control_points = {
        Point{0.0, 0.0, 0.0, 1.0},
        Point{0.0, 0.5, 0.0, 1.0},
        Point{0.25, 0.5, 0.0, 1.0},
        Point{0.25, 1.0, 0.0, 1.0},
        Point{0.5, 1.0, 0.0, 1.0},
        Point{0.5, 0.5, 0.0, 1.0},
        Point{0.75, 0.5, 0.0, 1.0},
        Point{0.75, 0.0, 0.0, 1.0},
        Point{1.0, 0.0, 0.0, 1.0}
    };
}
void init_degree4_2D_hard()
{
//     knots = [0,0,0,0,0, 
//         0.0385,0.0769,0.1154,0.1538,0.1923,0.2308,0.2692,0.3077,0.3462,0.3846,
//         0.4231,0.4615,0.5,0.5385,0.5769,0.6154,0.6538,0.6923,0.7308,0.7692,
//         0.8077,0.8462,0.8846,0.9231,0.9615,
//         1,1,1,1,1]  # 尾部节点 (p+1)

// control_points = [
//         [0.0, 0.0],
//     [0.03, 0.3],
//     [0.06, 0.6],
//     [0.1, 1.0],
//     [0.13, 0.6],
//     [0.16, 0.3],
//     [0.2, 0.0],
//     [0.23, 0.3],
//     [0.26, 0.6],
//     [0.3, 1.0],
//     [0.33, 0.6],
//     [0.36, 0.3],
//     [0.4, 0.0],
//     [0.43, 0.3],
//     [0.46, 0.6],
//     [0.5, 1.0],
//     [0.53, 0.6],
//     [0.56, 0.3],
//     [0.6, 0.0],
//     [0.63, 0.3],
//     [0.66, 0.6],
//     [0.7, 1.0],
//     [0.73, 0.6],
//     [0.76, 0.3],
//     [0.8, 1.0],
//     [0.83, 0.6],
//     [0.86, 0.3],
//     [0.9, 0.0],
//     [0.93, 0.3],
//     [0.96, 0.6]
// ]
    knots = {0,0,0,0,0, 
        0.0385,0.0769,0.1154,0.1538,0.1923,0.2308,0.2692,0.3077,0.3462,0.3846,
        0.4231,0.4615,0.5,0.5385,0.5769,0.6154,0.6538,0.6923,0.7308,0.7692,
        0.8077,0.8462,0.8846,0.9231,0.9615,
        1,1,1,1,1};  // 尾部节点 (p+1)

    control_points = {
        Point{0.0, 0.0, 0.0, 1.0},
        Point{0.03, 0.3, 0.0, 1.0},
        Point{0.06, 0.6, 0.0, 1.0},
        Point{0.1, 1.0, 0.0, 1.0},
        Point{0.13, 0.6, 0.0, 1.0},
        Point{0.16, 0.3, 0.0, 1.0},
        Point{0.2, 0.0, 0.0, 1.0},
        Point{0.23, 0.3, 0.0, 1.0},
        Point{0.26, 0.6, 0.0, 1.0},
        Point{0.3, 1.0, 0.0, 1.0},
        Point{0.33, 0.6, 0.0, 1.0},
        Point{0.36, 0.3, 0.0, 1.0},
        Point{0.4, 0.0, 0.0, 1.0},
        Point{0.43, 0.3, 0.0, 1.0},
        Point{0.46, 0.6, 0.0, 1.0},
        Point{0.5, 1.0, 0.0, 1.0},
        Point{0.53, 0.6, 0.0, 1.0},
        Point{0.56, 0.3, 0.0, 1.0},
        Point{0.6, 0.0, 0.0, 1.0},
        Point{0.63, 0.3, 0.0, 1.0},
        Point{0.66, 0.6, 0.0, 1.0},
        Point{0.7, 1.0, 0.0, 1.0},
        Point{0.73, 0.6, 0.0, 1.0},
        Point{0.76, 0.3, 0.0, 1.0},
        Point{0.8, 1.0, 0.0, 1.0},
        Point{0.83, 0.6, 0.0, 1.0},
        Point{0.86, 0.3, 0.0, 1.0},
        Point{0.9, 0.0, 0.0, 1.0},
        Point{0.93, 0.3, 0.0, 1.0},
        Point{0.96, 0.6, 0.0, 1.0}
    };
}

void init_degree5_2D_easy()
{
    knots = {0, 0, 0, 0, 0,0,   // 前导节点 (p+1)
             1, 1, 1, 1, 1,1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z=0
    Point p0{0.0, 0.5, 0.0, 1.0};
    Point p1{0.1, 0.7, 0.0, 1.0};
    Point p2{0.2, 0.9, 0.0, 1.0};
    Point p3{0.3, 0.8, 0.0, 1.0};
    Point p4{0.4, 0.6, 0.0, 1.0};
    Point p5{1.0, 0.7, 0.0, 1.0};

    control_points = {p0, p1, p2, p3, p4,p5};
}
void init_degree5_2D_normal()
{
    knots = {0, 0, 0, 0, 0, 0,   // 前导节点 (p+1)
             0.15, 0.3, 0.45, 0.6, 0.75, 0.9,   // 内部节点
             1, 1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    control_points = {
        Point{0.0, 0.5, 0.0, 1.0},
        Point{0.1, 0.7, 0.0, 1.0},
        Point{0.2, 0.9, 0.0, 1.0},
        Point{0.3, 0.8, 0.0, 1.0},
        Point{0.4, 0.6, 0.0, 1.0},
        Point{0.5, 0.4, 0.0, 1.0},
        Point{0.6, 0.3, 0.0, 1.0},
        Point{0.7, 0.4, 0.0, 1.0},
        Point{0.8, 0.6, 0.0, 1.0},
        Point{0.9, 0.8, 0.0, 1.0},
        Point{1.0, 0.9, 0.0, 1.0},
        Point{1.0, 0.7, 0.0, 1.0}
    };
}
void init_degree5_2D_hard()
{
//     # Degree=5的knots和控制点
// # knots = [0,0,0,0,0,0,
// #         0.0286,0.0571,0.0857,0.1143,0.1429,0.1714,0.2,0.2286,0.2571,0.2857,
// #         1,1,1,1,1,1]  # 尾部节点 (p+1)

// # control_points = [
// #     [0.800000, 0.700000, 0, 1.000000],
// #     [0.707817, 0.716361, 0, 1.000000],
// #     [0.487920, 0.799757, 0, 1.000000],
// #     [0.275447, 0.698937, 0, 1.000000],
// #     [0.200973, 0.475860, 0, 1.000000],
// #     [0.310266, 0.267619, 0, 1.000000],
// #     [0.536161, 0.202187, 0, 1.000000],
// #     [0.739833, 0.319777, 0, 1.000000],
// #     [0.796115, 0.548123, 0, 1.000000],
// #     [0.670419, 0.746895, 0, 1.000000],
// #     [0.439992, 0.793937, 0, 1.000000],
// #     [0.246443, 0.660340, 0, 1.000000],
// #     [0.208717, 0.428205, 0, 1.000000],
// #     [0.350000, 0.240192, 0, 1.000000],
// #     [0.583465, 0.211845, 0, 1.000000],
// #     [0.765637, 0.360583, 0, 1.000000],
// # ]
    knots={0,0,0,0,0,0,
           0.0286,0.0571,0.0857,0.1143,0.1429,0.1714,0.2,0.2286,0.2571,0.2857,
           1,1,1,1,1,1};
    control_points={
        Point{0.800000, 0.700000, 0, 1.000000},
        Point{0.707817, 0.716361, 0, 1.000000},
        Point{0.487920, 0.799757, 0, 1.000000},
        Point{0.275447, 0.698937, 0, 1.000000},
        Point{0.200973, 0.475860, 0, 1.000000},
        Point{0.310266, 0.267619, 0, 1.000000},
        Point{0.536161, 0.202187, 0, 1.000000},
        Point{0.739833, 0.319777, 0, 1.000000},
        Point{0.796115, 0.548123, 0, 1.000000},
        Point{0.670419, 0.746895, 0, 1.000000},
        Point{0.439992, 0.793937, 0, 1.000000},
        Point{0.246443, 0.660340, 0, 1.000000},
        Point{0.208717, 0.428205, 0, 1.000000},
        Point{0.350000, 0.240192, 0, 1.000000},
        Point{0.583465, 0.211845, 0, 1.000000},
        Point{0.765637, 0.360583, 0, 1.000000}
    };

}
void init_degree6_2D_easy()
{
//     knots = [0, 0, 0, 0, 0, 0, 0,   # 前导节点 (p+1)
//      1, 1, 1, 1, 1, 1, 1]  # 尾部节点 (p+1)

// control_points = [
// [0.4, 0.5, 0.0, 1.0],
// [0.1, 0.7, 0.0, 1.0],
// [0.2, 0.9, 0.0, 1.0],
// [0.3, 0.8, 0.0, 1.0],
// [0.4, 0.6, 0.0, 1.0],
// [0.7, 0.4, 0.0, 1.0],
// [1.0, 0.7, 0.0, 1.0]
// ]

    knots = {0, 0, 0, 0, 0, 0, 0,
                1, 1, 1, 1, 1, 1, 1};

    Point p0{0.4, 0.5, 0.0, 1.0};
    Point p1{0.1, 0.7, 0.0, 1.0};
    Point p2{0.2, 0.9, 0.0, 1.0};
    Point p3{0.3, 0.8, 0.0, 1.0};
    Point p4{0.4, 0.6, 0.0, 1.0};
    Point p5{0.7, 0.4, 0.0, 1.0};
    Point p6{1.0, 0.7, 0.0, 1.0};

    control_points = {p0, p1, p2, p3, p4, p5, p6};

}
void init_degree6_2D_normal()
{
//     knots = [0, 0, 0, 0, 0, 0, 0,  
//     0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 
//     0.8, 0.9, 1,  
//     1, 1, 1, 1, 1, 1]  # 尾部节点 (p+1)

// control_points = [
// [0.0, 0.1, 0, 1.0],
// [0.3, 0.2, 0, 1.0],
// [0.6, 0.3, 0, 1.0],
// [0.9, 0.4, 0, 1.0],
// [0.2, 0.5, 0, 1.0],
// [0.3, 0.6, 0, 1.0],
// [0.4, 0.7, 0, 1.0],
// [0.5, 0.8, 0, 1.0],
// [0.6, 0.9, 0, 1.0],
// [0.7, 1.0, 0, 1.0],
// [0.8, 0.9, 0, 1.0],
// [0.9, 0.8, 0, 1.0],
// [0.95, 0.7, 0, 1.0],
// [1.0, 0.6, 0, 1.0],
// [1.0, 0.5, 0, 1.0]
// ]
   knots={0, 0, 0, 0, 0, 0, 0, 0.1, 0.2, 0.3, 0.4, 0.6, 0.7, 0.8, 0.9, 1,  1, 1, 1, 1, 1, 1};
   control_points={
       Point{0.0, 0.1, 0, 1.0},
       Point{0.3, 0.2, 0, 1.0},
       Point{0.6, 0.3, 0, 1.0},
       Point{0.9, 0.4, 0, 1.0},
       Point{0.2, 0.5, 0, 1.0},
       Point{0.3, 0.6, 0, 1.0},
       Point{0.4, 0.7, 0, 1.0},
       Point{0.5, 0.8, 0, 1.0},
       Point{0.6, 0.9, 0, 1.0},
       Point{0.7, 1.0, 0, 1.0},
       Point{0.8, 0.9, 0, 1.0},
       Point{0.9, 0.8, 0, 1.0},
       Point{0.95, 0.7, 0, 1.0},
       Point{1.0, 0.6, 0, 1.0},
       Point{1.0, 0.5, 0, 1.0}
   };
}
void init_degree6_2D_hard()
{
//     knots = [0,0,0,0,0,0,0,
//         0.0227,0.0455,0.0682,0.0909,0.1136,0.1364,0.1591,0.1818,0.2045,0.2273,
//         0.25,0.2727,0.2955,0.3182,0.3409,0.3636,0.3864,0.4091,0.4318,0.4545,
//         0.4773,0.5,0.5227,0.5455,0.5682,0.5909,0.6136,0.6364,0.6591,0.6818,
//         0.7045,0.7273,0.75,0.7727,0.7955,0.8182,0.8409,0.8636,0.8864,0.9091,
//         0.9318,0.9545,0.9773,
//         1,1,1,1,1,1,1]  # 尾部节点 (p+1)
        knots={0,0,0,0,0,0,0,
                0.0227,0.0455,0.0682,0.0909,0.1136,0.1364,0.1591,0.1818,0.2045,0.2273,
                0.25,0.2727,0.2955,0.3182,0.3409,0.3636,0.3864,0.4091,0.4318,0.4545,
                0.4773,0.5,0.5227,0.5455,0.5682,0.5909,0.6136,0.6364,0.6591,0.6818,
                0.7045,0.7273,0.75,0.7727,0.7955,0.8182,0.8409,0.8636,0.8864,0.9091,
                0.9318,0.9545,0.9773,
                1,1,1,1,1,1,1};
    control_points={
        Point{0.900000, 0.500000, 0.000000, 1.000000},
        Point{0.844971, 0.694284, 0.000000, 1.000000},
        Point{0.703125, 0.835076, 0.000000, 1.000000},
        Point{0.512428, 0.887556, 0.000000, 1.000000},
        Point{0.322536, 0.840165, 0.000000, 1.000000},
        Point{0.181869, 0.707081, 0.000000, 1.000000},
        Point{0.125261, 0.524059, 0.000000, 1.000000},
        Point{0.165354, 0.338843, 0.000000, 1.000000},
        Point{0.289835, 0.198712, 0.000000, 1.000000},
        Point{0.465118, 0.138413, 0.000000, 1.000000},
        Point{0.645392, 0.171558, 0.000000, 1.000000},
        Point{0.784584, 0.287610, 0.000000, 1.000000},
        Point{0.848139, 0.455113, 0.000000, 1.000000},
        Point{0.821583, 0.630195, 0.000000, 1.000000},
        Point{0.713768, 0.768057, 0.000000, 1.000000},
        Point{0.554069, 0.834433, 0.000000, 1.000000},
        Point{0.384408, 0.814100, 0.000000, 1.000000},
        Point{0.248257, 0.714312, 0.000000, 1.000000},
        Point{0.179491, 0.562419, 0.000000, 1.000000},
        Point{0.193978, 0.398394, 0.000000, 1.000000},
        Point{0.285961, 0.264320, 0.000000, 1.000000},
        Point{0.430065, 0.193594, 0.000000, 1.000000},
        Point{0.588262, 0.202617, 0.000000, 1.000000},
        Point{0.719903, 0.287036, 0.000000, 1.000000},
        Point{0.792163, 0.423386, 0.000000, 1.000000},
        Point{0.788214, 0.575579, 0.000000, 1.000000},
        Point{0.711107, 0.704445, 0.000000, 1.000000},
        Point{0.582455, 0.777818, 0.000000, 1.000000},
        Point{0.436423, 0.778551, 0.000000, 1.000000},
        Point{0.310658, 0.708486, 0.000000, 1.000000},
        Point{0.236589, 0.587459, 0.000000, 1.000000},
        Point{0.231574, 0.447724, 0.000000, 1.000000},
        Point{0.294876, 0.325375, 0.000000, 1.000000},
        Point{0.408373, 0.251019, 0.000000, 1.000000},
        Point{0.541691, 0.242124, 0.000000, 1.000000},
        Point{0.660326, 0.298958, 0.000000, 1.000000},
        Point{0.734567, 0.405034, 0.000000, 1.000000},
        Point{0.746935, 0.531839, 0.000000, 1.000000},
        Point{0.696265, 0.646476, 0.000000, 1.000000},
        Point{0.597478, 0.720205, 0.000000, 1.000000},
        Point{0.477268, 0.735641, 0.000000, 1.000000},
        Point{0.366895, 0.690816, 0.000000, 1.000000},
        Point{0.294064, 0.599173, 0.000000, 1.000000},
        Point{0.275971, 0.485617, 0.000000, 1.000000},
        Point{0.315279, 0.379760, 0.000000, 1.000000}, 
        Point{0.399941, 0.308205, 0.000000, 1.000000},
        Point{0.506803, 0.287864, 0.000000, 1.000000},
        Point{0.607910, 0.321991, 0.000000, 1.000000},
        Point{0.677820, 0.399854, 0.000000, 1.000000},
        Point{0.700000, 0.500000, 0.000000, 1.000000}
    }; 

}

void init_degree4_easy()
{
    knots = {0, 0, 0, 0, 0,   // 前导节点 (p+1)
             1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z=0
    Point p0{0.0, 0.5, 0.4, 1.0};
    Point p1{0.1, 0.7, 0.4, 1.0};
    Point p2{0.3, 0.8, 0.3, 1.0};
    Point p3{0.8, 0.6, 0.4, 1.0};
    Point p4{1.0, 0.1, 0.7, 1.0};

    control_points = {p0, p1, p2, p3, p4};
}

void init_degree5_easy()
{
    knots = {0, 0, 0, 0, 0,0,   // 前导节点 (p+1)
             1, 1, 1, 1, 1,1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z=0
    Point p0{0.0, 0.1, 0.2, 1.0};
    Point p1{0.1, 0.3, 0.4, 1.0};
    Point p2{0.2, 0.5, 0.6, 1.0};
    Point p3{0.3, 0.7, 0.5, 1.0};
    Point p4{0.4, 0.9, 0.4, 1.0};
    Point p5{0.5, 1.0, 0.3, 1.0};

    control_points = {p0, p1, p2, p3, p4,p5};
}
void init_degree5_normal()
{
    knots = {0, 0, 0, 0, 0, 0,
             0.15, 0.3, 0.45, 0.6, 0.75, 0.9,
             1, 1, 1, 1, 1, 1};
    control_points = {
        Point{0.0, 0.1, 0.2, 1.0},
        Point{0.1, 0.2, 0.4, 1.0},
        Point{0.2, 0.3, 0.6, 1.0},
        Point{0.3, 0.4, 0.7, 1.0},
        Point{0.4, 0.5, 0.8, 1.0},
        Point{0.5, 0.6, 0.9, 1.0},
        Point{0.6, 0.7, 1.0, 1.0},
        Point{0.7, 0.8, 0.9, 1.0},
        Point{0.8, 0.9, 0.8, 1.0},
        Point{0.9, 1.0, 0.7, 1.0},
        Point{1.0, 0.9, 0.6, 1.0},
        Point{1.0, 0.8, 0.5, 1.0}
    };
}



void init_degree6_easy()
{
    knots = {0, 0, 0, 0, 0, 0, 0,   // 前导节点 (p+1)
             1, 1, 1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z=0
    Point p0{0.2, 0.5, 0.6, 1.0};
    Point p1{0.4, 0.9, 0.4, 1.0};
    Point p2{0.5, 1.0, 0.3, 1.0};
    Point p3{0.7, 0.8, 0.3, 1.0};
    Point p4{0.8, 0.5, 0.4, 1.0};
    Point p5{0.9, 0.2, 0.5, 1.0};
    Point p6{1.0, 0.9, 0.6, 1.0};

    control_points = {p0, p1, p2, p3, p4, p5, p6};
}

void init()
{
    //knots={0,0,0,1,2,3,4,4,5,5,5};//p=2
    // knots={0,0,0,0,1,2,3,4,5,5,5,5};
    knots={0,0,0,0,0,0.1,0.2,0.4,0.5,1,1,1,1,1};//p=4
    // Point p0{0,0,0,1};
    // Point p1{0,0,1,1};
    // Point p2{0,1,1,1};
    // Point p3{1,1,1,1};
    // Point p4{1,1,1,2};
    // Point p5{1,1,2,2};
    // Point p6{1,2,2,2};
    // Point p7{2,2,2,2};
    // Point p8{2,2,2,3};

    Point p0{0,0,1,1};
    Point p1{0,1,1,1};
    Point p2{1,1,1,1};
    Point p3{1,2,1,1};
    Point p4{2,2,1,1};
    Point p5{2,3,1,1};
    Point p6{3,3,1,1};
    Point p7{3,4,1,1};
    Point p8{4,4,1,1};

    // knots={0,0,0,0,0,0,0.1,0.2,0.4,0.5,0.6,1,1,1,1,1,1};//p=5
    // Point p0{0,0,1,1};
    // Point p1{0,1,1,1};
    // Point p2{1,1,1,1};
    // Point p3{1,2,1,1};
    // Point p4{2,2,1,1};
    // Point p5{2,3,1,1};
    // Point p6{3,3,1,1};
    // Point p7{3,4,1,1};
    // Point p8{4,4,1,1};
    // Point p9{4,5,1,1};
    // Point p10{5,5,1,1};

    // knots={0,0,0,0,0,0,0,0.1,0.2,0.4,0.5,0.6,0.7,1,1,1,1,1,1,1};//p=6
    // Point p0{0,0,1,1};
    // Point p1{0,1,1,1};
    // Point p2{1,1,1,1};
    // Point p3{1,2,1,1};
    // Point p4{2,2,1,1};
    // Point p5{2,3,1,1};
    // Point p6{3,3,1,1};
    // Point p7{3,4,1,1};
    // Point p8{4,4,1,1};
    // Point p9{4,5,1,1};
    // Point p10{5,5,1,1};
    // Point p11{5,6,1,1};
    // Point p12{6,6,1,1};

    control_points={p0,p1,p2,p3,p4,p5,p6,p7,p8};
    querys={2.5,3.5};
}

void init_degree4_3D_normal()
{
    //knots={0,0,0,1,2,3,4,4,5,5,5};//p=2
    // knots={0,0,0,0,1,2,3,4,5,5,5,5};
    knots={0,0,0,0,0,0.1,0.2,0.4,0.5,1,1,1,1,1};//p=4
    Point p0{0,0,0.25,1};
    Point p1{0,0.25,0.25,1};
    Point p2{0.25,0.25,0.25,1};
    Point p3{0.25,0.5,0.25,1};
    Point p4{0.5,0.5,0.25,1};
    Point p5{0.5,0.75,0.25,1};
    Point p6{0.75,0.75,0.25,1};
    Point p7{0.75,1,0.25,1};
    Point p8{1,1,0.25,1};

    // knots={0,0,0,0,0,0,0.1,0.2,0.4,0.5,0.6,1,1,1,1,1,1};//p=5
    // Point p0{0,0,1,1};
    // Point p1{0,1,1,1};
    // Point p2{1,1,1,1};
    // Point p3{1,2,1,1};
    // Point p4{2,2,1,1};
    // Point p5{2,3,1,1};
    // Point p6{3,3,1,1};
    // Point p7{3,4,1,1};
    // Point p8{4,4,1,1};
    // Point p9{4,5,1,1};
    // Point p10{5,5,1,1};

    // knots={0,0,0,0,0,0,0,0.1,0.2,0.4,0.5,0.6,0.7,1,1,1,1,1,1,1};//p=6
    // Point p0{0,0,1,1};
    // Point p1{0,1,1,1};
    // Point p2{1,1,1,1};
    // Point p3{1,2,1,1};
    // Point p4{2,2,1,1};
    // Point p5{2,3,1,1};
    // Point p6{3,3,1,1};
    // Point p7{3,4,1,1};
    // Point p8{4,4,1,1};
    // Point p9{4,5,1,1};
    // Point p10{5,5,1,1};
    // Point p11{5,6,1,1};
    // Point p12{6,6,1,1};

    control_points={p0,p1,p2,p3,p4,p5,p6,p7,p8};
    querys={0.5,0.7};
}

void init_degree5()
{
    // Degree=5 需要 6 个首尾重复节点 (m = n + p + 1 = 12 + 5 + 1 = 18)
    knots = {0, 0, 0, 0, 0, 0,   // 前导节点 (p+1)
             0.15, 0.3, 0.45, 0.6, 0.75, 0.9,   // 内部节点
             1, 1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z不全为1
    Point p0{0.0, 0.1, 0.2, 1.0};
    Point p1{0.1, 0.2, 0.4, 1.0};
    Point p2{0.2, 0.3, 0.6, 1.0};
    Point p3{0.3, 0.4, 0.7, 1.0};
    Point p4{0.4, 0.5, 0.8, 1.0};
    Point p5{0.5, 0.6, 0.9, 1.0};
    Point p6{0.6, 0.7, 1.0, 1.0};
    Point p7{0.7, 0.8, 0.9, 1.0};
    Point p8{0.8, 0.9, 0.8, 1.0};
    Point p9{0.9, 1.0, 0.7, 1.0};
    Point p10{1.0, 0.9, 0.6, 1.0};
    Point p11{1.0, 0.8, 0.5, 1.0};

    control_points = {p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11};
}

void init_degree6()
{
    // Degree=6 需要 7 个首尾重复节点 (m = n + p + 1 = 15 + 6 + 1 = 22)
    knots = {0, 0, 0, 0, 0, 0, 0,   // 前导节点 (p+1)
             0.1, 0.2, 0.3, 0.4, 0.6, 0.7,   // 内部节点
             0.8, 0.9, 1,   // 中间部分
             1, 1, 1, 1, 1, 1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z不全为1
    Point p0{0.0, 0.1, 0.2, 1.0};
    Point p1{0.05, 0.2, 0.4, 1.0};
    Point p2{0.1, 0.3, 0.6, 1.0};
    Point p3{0.15, 0.4, 0.7, 1.0};
    Point p4{0.2, 0.5, 0.8, 1.0};
    Point p5{0.3, 0.6, 0.9, 1.0};
    Point p6{0.4, 0.7, 1.0, 1.0};
    Point p7{0.5, 0.8, 0.9, 1.0};
    Point p8{0.6, 0.9, 0.8, 1.0};
    Point p9{0.7, 1.0, 0.7, 1.0};
    Point p10{0.8, 0.9, 0.6, 1.0};
    Point p11{0.9, 0.8, 0.5, 1.0};
    Point p12{0.95, 0.7, 0.4, 1.0};
    Point p13{1.0, 0.6, 0.3, 1.0};
    Point p14{1.0, 0.5, 0.2, 1.0};

    control_points = {p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14};
}
void init_degree4_complex()
{
    knots = {0,0,0,0,0, 
        0.0385,0.0769,0.1154,0.1538,0.1923,0.2308,0.2692,0.3077,0.3462,0.3846,
        0.4231,0.4615,0.5,0.5385,0.5769,0.6154,0.6538,0.6923,0.7308,0.7692,
        0.8077,0.8462,0.8846,0.9231,0.9615,
        1,1,1,1,1};  // 尾部节点 (p+1)

    for (int i = 0; i < 30; ++i) {
        double theta = i * 6 * M_PI / 29; // 3圈
        double x = 0.5 + 0.4 * cos(theta);
        double y = 0.5 + 0.4 * sin(theta);
        double z = static_cast<double>(i) / 29;
        control_points.emplace_back(x, y, z, 1);
    }
}
void init_degree5_complex()
{
    // Degree=5 需要 6 个首尾重复节点 (m = n + p + 1 = 30 + 5 + 1 = 36)
    knots = {0,0,0,0,0,0,
        0.0286,0.0571,0.0857,0.1143,0.1429,0.1714,0.2,0.2286,0.2571,0.2857,
        0.3143,0.3429,0.3714,0.4,0.4286,0.4571,0.4857,0.5143,0.5429,0.5714,
        0.6,0.6286,0.6571,0.6857,0.7143,0.7429,0.7714,0.8,0.8286,0.8571,
        0.8857,0.9143,0.9429,0.9714,
        1,1,1,1,1,1};  // 尾部节点 (p+1)

    // 控制点坐标均归一化到[0,1]，w=1，z不全为1
    for (int i = 0; i < 40; ++i) {
        double theta = i * 10 * M_PI / 39; // 5圈
        double x = 0.5 + 0.3 * cos(theta);
        double y = 0.5 + 0.3 * sin(theta);
        double z = 0.5 + 0.5 * sin(i * M_PI / 39); // z在0~1间波动
        control_points.emplace_back(x, y, z, 1);
    }

    // control_points = {p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23};
}
void init_degree6_complex()
{
    // Degree=6 需要 7 个首尾重复节点 (m = n + p + 1 = 40 + 6 + 1 = 47)
    knots = {0,0,0,0,0,0,0,
        0.0227,0.0455,0.0682,0.0909,0.1136,0.1364,0.1591,0.1818,0.2045,0.2273,
        0.25,0.2727,0.2955,0.3182,0.3409,0.3636,0.3864,0.4091,0.4318,0.4545,
        0.4773,0.5,0.5227,0.5455,0.5682,0.5909,0.6136,0.6364,0.6591,0.6818,
        0.7045,0.7273,0.75,0.7727,0.7955,0.8182,0.8409,0.8636,0.8864,0.9091,
        0.9318,0.9545,0.9773,
        1,1,1,1,1,1,1};  // 尾部节点 (p+1)

    for (int i = 0; i < 50; ++i) {
            double theta = i * 8 * M_PI / 49; // 4圈
            double r = 0.4 - 0.2 * (i / 49.0);
            double x = 0.5 + r * cos(theta);
            double y = 0.5 + r * sin(theta);
            double z = static_cast<double>(i) / 49;
            control_points.emplace_back(x, y, z, 1);
        }
    

    // control_points = {p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25};
}



void init2()
{
    knots.resize(1002);
    control_points.resize(998);
    for(int i=4;i<998;i++)
    {
        knots[i]=i/1002.0;
    }
    knots[0]=0.0;
    knots[1]=0.0;
    knots[2]=0.0;
    knots[3]=0.0;
    knots[998]=1.0;
    knots[999]=1.0;
    knots[1000]=1.0;
    knots[1001]=1.0;
    for(int i=0;i<998;i++)
    {
        control_points[i].x=i;
        control_points[i].y=i;
        control_points[i].z=i;
        control_points[i].w=1;
    }
}

void initn(int n)
{
    knots.resize(n);
    control_points.resize(n-p-1);
    for(int i=p+1;i<n-p-1;i++)
    {
        knots[i]=1.0*i/n;
    }
    for(int i=0;i<=p;i++)
    {
        knots[i]=0;
        knots[n-i-1]=1;
    }
    for(int i=0;i<n-p-1;i++)
    {
        control_points[i].x=i;
        control_points[i].y=i;
        control_points[i].z=i;
        control_points[i].w=1;
    }
}

void initus()
{
    us={0.5,0.5,0.5,0.5,0.5};
}